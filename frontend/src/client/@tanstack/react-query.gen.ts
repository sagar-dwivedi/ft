// This file is auto-generated by @hey-api/openapi-ts

import {
	type Options,
	root,
	getTransactions,
	addTransaction,
	deleteTransaction,
	updateTransaction,
} from "../sdk.gen";
import { queryOptions, type UseMutationOptions } from "@tanstack/react-query";
import type {
	RootData,
	GetTransactionsData,
	AddTransactionData,
	AddTransactionError,
	AddTransactionResponse,
	DeleteTransactionData,
	DeleteTransactionError,
	UpdateTransactionData,
	UpdateTransactionError,
	UpdateTransactionResponse,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
	Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
		_id: string;
		_infinite?: boolean;
		tags?: ReadonlyArray<string>;
	},
];

const createQueryKey = <TOptions extends Options>(
	id: string,
	options?: TOptions,
	infinite?: boolean,
	tags?: ReadonlyArray<string>,
): [QueryKey<TOptions>[0]] => {
	const params: QueryKey<TOptions>[0] = {
		_id: id,
		baseUrl:
			options?.baseUrl ||
			(options?.client ?? _heyApiClient).getConfig().baseUrl,
	} as QueryKey<TOptions>[0];
	if (infinite) {
		params._infinite = infinite;
	}
	if (tags) {
		params.tags = tags;
	}
	if (options?.body) {
		params.body = options.body;
	}
	if (options?.headers) {
		params.headers = options.headers;
	}
	if (options?.path) {
		params.path = options.path;
	}
	if (options?.query) {
		params.query = options.query;
	}
	return [params];
};

export const rootQueryKey = (options?: Options<RootData>) =>
	createQueryKey("root", options);

/**
 * Root
 */
export const rootOptions = (options?: Options<RootData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await root({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: rootQueryKey(options),
	});
};

export const getTransactionsQueryKey = (
	options?: Options<GetTransactionsData>,
) => createQueryKey("getTransactions", options);

/**
 * Get Transactions
 */
export const getTransactionsOptions = (
	options?: Options<GetTransactionsData>,
) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getTransactions({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true,
			});
			return data;
		},
		queryKey: getTransactionsQueryKey(options),
	});
};

/**
 * Add Transaction
 */
export const addTransactionMutation = (
	options?: Partial<Options<AddTransactionData>>,
): UseMutationOptions<
	AddTransactionResponse,
	AddTransactionError,
	Options<AddTransactionData>
> => {
	const mutationOptions: UseMutationOptions<
		AddTransactionResponse,
		AddTransactionError,
		Options<AddTransactionData>
	> = {
		mutationFn: async (fnOptions) => {
			const { data } = await addTransaction({
				...options,
				...fnOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

/**
 * Delete Transaction
 */
export const deleteTransactionMutation = (
	options?: Partial<Options<DeleteTransactionData>>,
): UseMutationOptions<
	unknown,
	DeleteTransactionError,
	Options<DeleteTransactionData>
> => {
	const mutationOptions: UseMutationOptions<
		unknown,
		DeleteTransactionError,
		Options<DeleteTransactionData>
	> = {
		mutationFn: async (fnOptions) => {
			const { data } = await deleteTransaction({
				...options,
				...fnOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};

/**
 * Update Transaction
 */
export const updateTransactionMutation = (
	options?: Partial<Options<UpdateTransactionData>>,
): UseMutationOptions<
	UpdateTransactionResponse,
	UpdateTransactionError,
	Options<UpdateTransactionData>
> => {
	const mutationOptions: UseMutationOptions<
		UpdateTransactionResponse,
		UpdateTransactionError,
		Options<UpdateTransactionData>
	> = {
		mutationFn: async (fnOptions) => {
			const { data } = await updateTransaction({
				...options,
				...fnOptions,
				throwOnError: true,
			});
			return data;
		},
	};
	return mutationOptions;
};
