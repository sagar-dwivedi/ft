// This file is auto-generated by @hey-api/openapi-ts

import { z } from "zod";

/**
 * ValidationError
 */
export const zValidationError = z.object({
	loc: z.array(z.union([z.string(), z.int()])),
	msg: z.string(),
	type: z.string(),
});

export type ValidationErrorZodType = z.infer<typeof zValidationError>;

/**
 * HTTPValidationError
 */
export const zHttpValidationError = z.object({
	detail: z.optional(z.array(zValidationError)),
});

export type HttpValidationErrorZodType = z.infer<typeof zHttpValidationError>;

/**
 * Transaction
 */
export const zTransaction = z.object({
	date: z.string(),
	amount: z.number(),
	type: z.string(),
	category: z.optional(z.union([z.string(), z.null()])),
	description: z.optional(z.union([z.string(), z.null()])),
	id: z.int(),
});

export type TransactionZodType = z.infer<typeof zTransaction>;

/**
 * TransactionCreate
 */
export const zTransactionCreate = z.object({
	date: z.string(),
	amount: z.number(),
	type: z.string(),
	category: z.optional(z.union([z.string(), z.null()])),
	description: z.optional(z.union([z.string(), z.null()])),
});

export type TransactionCreateZodType = z.infer<typeof zTransactionCreate>;

export const zRootData = z.object({
	body: z.optional(z.never()),
	path: z.optional(z.never()),
	query: z.optional(z.never()),
});

export type RootDataZodType = z.infer<typeof zRootData>;

export const zGetTransactionsData = z.object({
	body: z.optional(z.never()),
	path: z.optional(z.never()),
	query: z.optional(z.never()),
});

export type GetTransactionsDataZodType = z.infer<typeof zGetTransactionsData>;

/**
 * Response Transactions-Get Transactions
 * Successful Response
 */
export const zGetTransactionsResponse = z.array(zTransaction);

export type GetTransactionsResponseZodType = z.infer<
	typeof zGetTransactionsResponse
>;

export const zAddTransactionData = z.object({
	body: zTransactionCreate,
	path: z.optional(z.never()),
	query: z.optional(z.never()),
});

export type AddTransactionDataZodType = z.infer<typeof zAddTransactionData>;

/**
 * Successful Response
 */
export const zAddTransactionResponse = zTransaction;

export type AddTransactionResponseZodType = z.infer<
	typeof zAddTransactionResponse
>;

export const zDeleteTransactionData = z.object({
	body: z.optional(z.never()),
	path: z.object({
		tx_id: z.int(),
	}),
	query: z.optional(z.never()),
});

export type DeleteTransactionDataZodType = z.infer<
	typeof zDeleteTransactionData
>;

export const zUpdateTransactionData = z.object({
	body: zTransactionCreate,
	path: z.object({
		tx_id: z.int(),
	}),
	query: z.optional(z.never()),
});

export type UpdateTransactionDataZodType = z.infer<
	typeof zUpdateTransactionData
>;

/**
 * Successful Response
 */
export const zUpdateTransactionResponse = zTransaction;

export type UpdateTransactionResponseZodType = z.infer<
	typeof zUpdateTransactionResponse
>;
